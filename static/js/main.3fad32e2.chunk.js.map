{"version":3,"sources":["component/TodoItems/TodoItems.js","component/AddItem/AddItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","props","items","deleteItem","listItem","length","map","item","key","id","className","description","type","onClick","AddItem","state","handleChange","e","setState","target","value","handleClick","console","log","addItem","handleSubmit","preventDefault","this","placeholder","onChange","Component","App","todos","filter","Math","random","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gOAyBeA,EAtBG,SAACC,GAAS,IACjBC,EAAqBD,EAArBC,MAAOC,EAAcF,EAAdE,WAERC,EADOF,EAAMG,OACSH,EAAMI,KAAI,SAAAC,GAC9B,OACG,yBAAKC,IAAKD,EAAKE,IACV,4BACC,0BAAMC,UAAU,eAAeH,EAAKI,aACnC,0BAAMD,UAAU,YAAhB,IAA4B,2BAAOE,KAAK,cACxC,kCAAO,4BAAQF,UAAU,SAASG,QAAS,kBAAMV,EAAWI,EAAKE,MAA1D,gBAKrB,8CACR,OACI,yBAAKC,UAAU,aACNN,I,OC8BEU,G,kNA9CbC,MAAQ,CACNJ,YAAa,I,EAGfK,aAAe,SAACC,GAGd,EAAKC,SAAL,eACGD,EAAEE,OAAOV,GAAKQ,EAAEE,OAAOC,S,EAI5BC,YAAc,SAACJ,GACbK,QAAQC,IAAI,EAAKR,OAEjB,EAAKd,MAAMuB,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACZP,YAAa,iB,EAIjBc,aAAe,SAACR,GACdA,EAAES,iBACDJ,QAAQC,IAAI,EAAKR,OACW,KAA3B,EAAKA,MAAMJ,YACbW,QAAQC,IAAI,UAEZ,EAAKtB,MAAMuB,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACZP,YAAa,O,uDAMf,OACE,6BACE,2EACA,2BAAOD,UAAU,SAAUE,KAAK,SAAUQ,MAAM,cAAeP,QAASc,KAAKN,cAC5E,6BACD,2BAAQT,KAAK,OAAOgB,YAAY,oBAAqBnB,GAAG,cAAeoB,SAAUF,KAAKX,aAAeI,MAAOO,KAAKZ,MAAMJ,cACvH,2BAAOD,UAAU,SAASE,KAAK,SAASQ,MAAM,MAAMP,QAASc,KAAKF,oB,GA1CpDK,cCuDPC,E,4MArDbhB,MAAQ,CACNiB,MAAO,CACL,CACEvB,GAAI,EACJE,YAAa,kBAEf,CACEF,GAAI,EACJE,YAAa,eAEf,CACEF,GAAI,EACJE,YAAa,mB,EAenBR,WAAa,SAACM,GACZa,QAAQC,IAAId,GACZ,IAAIP,EAAQ,EAAKa,MAAMiB,MAAMC,QAAO,SAAC1B,GACnC,OAAOA,EAAKE,KAAOA,KAErB,EAAKS,SAAS,CAAEc,MAAO9B,IACvBoB,QAAQC,IAAIrB,I,EAGdsB,QAAU,SAACjB,GACTA,EAAKE,GAAKyB,KAAKC,SACf,IAAIjC,EAAQ,EAAKa,MAAMiB,MACvB9B,EAAMkC,KAAK7B,GACX,EAAKW,SAAS,CAAEhB,W,uDAIhB,OACE,yBAAKQ,UAAU,iBACd,wBAAIA,UAAU,eAAd,gBACC,kBAAC,EAAD,CAASc,QAASG,KAAKH,UACvB,kBAAC,EAAD,CAAWtB,MAAOyB,KAAKZ,MAAMiB,MAAO7B,WAAYwB,KAAKxB,kB,GAjD3C2B,aCQEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.3fad32e2.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoItems'\n\nconst TodoItems = (props)=>{\n    const {items, deleteItem} = props;\n    let length = items.length;\n    const listItem = length ? ( items.map(item =>{\n            return(\n               <div key={item.id}>               \n                    <li>\n                     <span className=\"description\">{item.description}</span>  \n                      <span className=\"checkbox\"> <input type=\"checkbox\" /></span>\n                      <span> <button className=\"button\" onClick={() => deleteItem(item.id)}>Delete</button></span> \n                    </li>\n               </div>\n            )\n        })\n    ) : <p>No item to show</p>\nreturn(\n    <div className=\"listItems\">\n            {listItem}       \n    </div>\n    )\n}\n\nexport default TodoItems;\n","import React, { Component } from \"react\";\nimport \"./AddItem.css\";\n\nclass AddItem extends Component {\n  state = {\n    description: \"\",\n  };\n\n  handleChange = (e) => {\n    //console.log(e);\n    //console.log(e.target.value);\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleClick = (e) => {\n    console.log(this.state);\n    \n    this.props.addItem(this.state);\n    this.setState({\n      description: \"Random text\",\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n     console.log(this.state);\n   if(this.state.description === ''){\n    console.log('false');\n   }else{\n    this.props.addItem(this.state);\n    this.setState({\n      description: \"\",\n    });\n   }\n  };\n \n  render() {\n    return (\n      <div>\n        <p> You have used 99999 seconds on this website</p>\n        <input className=\"submit\"  type=\"submit\"  value=\"Random text\"  onClick={this.handleClick} />\n         <br />\n        <input  type=\"text\" placeholder=\"Enter description\"  id=\"description\"  onChange={this.handleChange}  value={this.state.description} />\n        <input className=\"submit\" type=\"submit\" value=\"Add\" onClick={this.handleSubmit} />\n      </div>\n    );\n  }\n}\nexport default AddItem;\n","import React, { Component } from \"react\";\nimport TodoItems from \"./component/TodoItems/TodoItems\";\nimport AddItem from \"./component/AddItem/AddItem\";\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: 1,\n        description: \"Get out of bed\",\n      },\n      {\n        id: 2,\n        description: \"Brush teeth\",\n      },\n      {\n        id: 3,\n        description: \"Eat breakfast\",\n      },\n    ],\n  };\n\n  // deleteItem = (id)=>{\n  //   console.log(id);\n  //   let items =this.state.todos;\n  //   let i = items.findIndex(item => item.id === id)\n  //   items.splice(i,1)\n  //   this.setState({ todos:items })\n  //   console.log(items);\n  // }\n\n  // another way\n  deleteItem = (id) => {\n    console.log(id);\n    let items = this.state.todos.filter((item) => {\n      return item.id !== id;\n    });\n    this.setState({ todos: items });\n    console.log(items);\n  };\n\n  addItem = (item) => {\n    item.id = Math.random();\n    let items = this.state.todos;\n    items.push(item);\n    this.setState({ items });\n  };\n\n  render() {\n    return (\n      <div className=\"App container\">\n       <h1 className=\"text-center\">TodoList App</h1> \n        <AddItem addItem={this.addItem} />\n        <TodoItems items={this.state.todos} deleteItem={this.deleteItem} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}